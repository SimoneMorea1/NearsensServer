@{
    ViewBag.Title = "PlaceDetail";
    var currentPlace = Model.place;
}
<br />

<form id="placeDetailForm" class="col-lg-12">

    <div class="col-lg-6">

            <p>Title</p>
            <input class="form-control" id="txtName" type="text" value="@currentPlace.Name" required />
            <p>Description</p>
            <textarea class="form-control" id="txtDescription" required>@currentPlace.Description</textarea>

            <p>Main category</p>
            <select id="slctCategory" class="form-control" required>
                @{
                    if (currentPlace.MainCategory.Equals("AC"))
                    {

                        <option value="AC" selected>AC</option>
                        <option value="POI">POI</option>
                    }
                    else
                    {

                        <option value="AC">Commercial activity</option>
                        <option value="POI" selected>Point of interest</option>
                    }


                }
            </select>

            <p>Subcategory</p>
            <select id="slctSubcategory" class="form-control" required>
                @{
                    foreach (string subcategory in Model.subcategories)
                    {
                        if (@currentPlace.Subcategory.Equals(subcategory))
                        {
                            <option value="@currentPlace.Subcategory" selected>@currentPlace.Subcategory</option>
                        }
                        else
                        {
                            <option value="@subcategory">@subcategory</option>
                        }
                    }
                }
            </select>
            <br />
    <br />
    <p>Main photo</p>

    <img src="\@currentPlace.Icon" id="imgMainPhoto" style="width:300px">

    <br />
    <br />
    <div class="modal-body" style="display:none">

        <label class="label label-info col-lg-12" for="mainPhoto">Main photo</label>
        <br />
        <input type="file" id="mainPhoto" class="form-control col-lg-10" /> <input id="btnUploadMainPhoto" type="button" class="btn btn-success btn-sm col-lg-2" value="Upload" />
        <br style="clear:both" />

    </div>
    <input class="btn btn-group" id="btnDeleteMainPhoto" type="button" value="Delete Main photo" />

            <input class="btn btn-group" id="btnUpdatePlace" type="submit" value="Update" />


    </div>

    <div class="col-lg-6">

        <input type="text" id="txtAutocompleteAddress" class="form-control" placeholder="Insert address" value="@currentPlace.Address" required />
        <div id="map-canvas"></div>

    </div>

</form>
<div class="col-lg-4">
    <a href="@Url.Action("placePhotos/" + currentPlace.Id, "Home")">
        <button type="submit" style="margin-top:50%;width:200px;font-size:15px" class="btn btn-default"><span class="glyphicon glyphicon-camera" style="font-size:20px;"></span> MANAGE PHOTOS</button>
    </a>
</div>
@section scripts {

    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places&sensor=false"></script>

    <script type="text/javascript">

        var map;
        var lat = parseFloat(@currentPlace.Lat.ToString().Replace(",", "."));
        var lng = parseFloat(@currentPlace.Lng.ToString().Replace(",", "."));
        var marker;
        var autocomplete;

        google.maps.event.addDomListener(window, 'load', initialize);

        function initialize() {
            map = document.getElementById('map-canvas');
            var input = document.getElementById('txtAutocompleteAddress');

            //Map initializer
            var mapOptions = {
                center: { lat: lat, lng: lng },
                zoom: 15
            };
            map = new google.maps.Map(map,
                mapOptions);

            marker = new google.maps.Marker({ position: new google.maps.LatLng(lat, lng), map: map });

            addMapClickListener();

            //Autocomplete initializer

            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            google.maps.event.addListener(autocomplete, 'place_changed', function () {
                if (marker)
                    marker.setMap(null);
                var location = autocomplete.getPlace().geometry.location;
                lat = location.A;
                lng = location.F;
                map.panTo(location);
                map.setZoom(17);
                marker = new google.maps.Marker({ position: location, map: map });
            });
        }

        function addMapClickListener() {
            google.maps.event.addListener(map, 'click', function (event) {
                if (marker)
                    marker.setMap(null);
                lat = event.latLng.A;
                lng = event.latLng.F;
                marker = new google.maps.Marker({ position: event.latLng, map: map });
            });
        }

        $('#placeDetailForm').on('submit', function (e) {
            e.preventDefault();

            var place = {};
            place.Name = $('#txtName').val();
            place.Description = $('#txtDescription').val();
            place.MainCategory = $('#slctCategory').val();
            place.Subcategory = $('#slctSubcategory').val();
            place.Lat = lat;
            place.Lng = lng;
            place.Address = $('#txtAutocompleteAddress').val();
            place.Id = @currentPlace.Id;



            console.log(place);

            $.ajax({
                url: '/api/Places/',
                type: 'PUT',
                contentType: 'application/json',
                dataType: 'json',
                data: JSON.stringify(place),
                success: function (data) {
                   
                    alertify.set({ buttonFocus: "cancel" });
                   /* alertify.("Place Updated", function (e) {
                        if (e) {
                            location.reload();
                        }
                    });
                    */
                    alertify.confirm("PRO");
                },
                error: function (error) {
                    
                    alertify.error("Error on update", function (e) {
                        if (e) {
                            location.reload();
                        }
                    });
                }
            });
        });


    var newPlaceId = @currentPlace.Id;

    $('#btnUploadMainPhoto').on('click', function () {

        var files = $("#mainPhoto").get(0).files;
        if (files.length > 0) {
            var mainPhoto = new FormData();
            mainPhoto.append("file0", files[0]);
            uploadMainPhoto(mainPhoto); 
        }
    });


    $('#btnDeleteMainPhoto').on('click', function() {
        $('#imgMainPhoto').fadeOut();
        $('.modal-body').fadeIn();
    });

  


    function uploadMainPhoto(mainPhoto) {
        $.ajax({
            type: "POST",
            url: "/api/FileUpload/UploadPlaceIcon?placeId=" + newPlaceId,
            contentType: false,
            processData: false,
            data: mainPhoto,
            success: function (messages) {
                alert('Photo uploaded');
            },
            error: function (error) {
                alert("Upload failed");
            }
        });
    }


</script>

}

